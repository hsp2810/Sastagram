generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  username        String?          @unique
  email           String?          @unique
  image           String?
  bio             String?          @default("")
  emailVerified   DateTime?
  name            String?
  password        String?
  role            Role?            @default(USER)
  account_type    UserAccountType? @default(PUBLIC)
  accounts        Account[]
  followers       String[]         @default([])
  following       String[]         @default([])
  follow_requests String[]         @default([])
  Story           Story[]
  gender          Gender?          @default(UNSET)
  isVerified      Boolean?         @default(false)
  uploaded_posts  Post[]
  Comment         Comment[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token]) //Only 1 token for a specific email
}

model Story {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  uploader     User     @relation(fields: [userId], references: [id])
  content      String
  uploadedTime DateTime
  expiresIn    DateTime
  userId       String   @db.ObjectId
}

model Post {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  uploader         User      @relation(fields: [userId], references: [id])
  public_id        String
  sourceUrl        String
  uploadedTime     DateTime? @default(now())
  caption          String?
  likes            String[]
  commentsDisabled Boolean?  @default(false)
  comments         Comment[]

  //other
  userId String @db.ObjectId
}

model Comment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  comment_likes Int      @default(0)
  isPinned      Boolean  @default(false)
  likes         String[]
  uploadedTime  DateTime @default(now())

  //other
  Post      Post   @relation(fields: [postId], references: [id])
  postId    String @db.ObjectId
  commentBy User   @relation(fields: [userId], references: [id])
  userId    String @db.ObjectId
}

enum Role {
  USER
  ADMIN
}

enum UserAccountType {
  PUBLIC
  PRIVATE
}

enum Gender {
  UNSET
  MALE
  FEMALE
  TRANSGENDER
  PREFER_NOT_TO_SAY
}
